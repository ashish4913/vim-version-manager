#!/usr/bin/python
# FIXME: Refine implementation of subcommands.

import optparse
import os
import os.path
import shutil
import sys




class VimVersionManager:
  # Directory structure:
  #   ~/.vvm                 The root directory for Vim Version Manager.
  #     bin                  For command-line utilities.
  #     repos                Place to store repository of each version.
  #       $fork
  #       ...
  #     src                  Place to store source code of each version.
  #       $fork--$tagname    Naming is the same as ~/.vvm/vims.
  #       ...
  #     vims                 Place to store deployed versions.
  #       current            Symbolic link for an install directory.
  #       $fork--$tagname    This is the "version" format.
  #       vimorg--v7-3-254   Example: Install directory for the original one.
  #       macvim--v7.3-53    Example: Install directory for MacVim.
  #       ...

  # Driver::

  def main(self, args):
    p = VvmOptionParser(version='%prog 1.2.3')
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) == 0:
      p.print_help()
    else:
      subcmd_name = left_args[0]
      try:
        subcmd_func = getattr(self, 'cmd_%s' % subcmd_name)
      except AttributeError:
        die('Subcommand "%s" is not available.' % subcmd_name)
      subcmd_func(left_args)
    return

  # Subcommands::

  def cmd_fetch(self, args):
    '''Fetch source code of a specific version of Vim.'''
    p = VvmOptionParser()
    p.usage = '%prog fetch $version'
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) == 0:
      die('Please specify a version of Vim to fetch its source code.')
    version = left_args[0]
    return (
      self.fetch(version)
      and self.checkout(version)
    )

  def cmd_help(self, args):
    # FIXME: Add more useful description.
    '''Show help message to use Vim Version Manager.'''
    subcmd_names = [n for n in dir(self) if n.startswith('cmd_')]
    subcmd_names.sort()
    longest_subcmd_name = max(len(n) for n in subcmd_names)
    print 'Available commands:'
    for n in subcmd_names:
      print '  %s%s%s' % (
        n[len('cmd_'):],
        ' ' * (longest_subcmd_name - len(n) + 2),
        getattr(self, n).__doc__.split('\n')[0]
      )
    return True

  def cmd_install(self, args):
    '''Install a specific version of Vim.'''
    p = VvmOptionParser()
    p.usage = '%prog install $version $configure_option ...'
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) == 0:
      die('Please specify a version of Vim to install.')
    version = left_args[0]
    configure_options = left_args[1:]
    return (
      self.fetch(version)
      and self.checkout(version)
      and self.configure(version, configure_options)
      and self.make_install(version)
    )

  def cmd_rebuild(self, args):
    '''Rebuild a specific version of Vim, then install it.'''
    p = VvmOptionParser()
    p.usage = '%prog rebuild $version $configure_option ...'
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) == 0:
      die('Please specify a version of Vim to rebuild.')
    version = left_args[0]
    configure_options = left_args[1:]
    return (
      self.make_clean(version)
      and self.configure(version, configure_options)
      and self.make_install(version)
    )

  def cmd_reinstall(self, args):
    '''Reinstall a specific version of Vim.'''
    p = VvmOptionParser()
    p.usage = '%prog reinstall $version $configure_option ...'
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) == 0:
      die('Please specify a version of Vim to reinstall.')
    return (
      self.cmd_uninstall(('uninstall',) + tuple(left_args))
      and self.cmd_install(('install',) + tuple(left_args))
    )

  def cmd_setup(self, args):
    '''Set up files and directories for VVM'''
    vvm_repos_uri = 'git://github.com/kana/vim-version-manager.git'
    repos_dir = get_repos_dir('vvm')
    return (
      (
        has('git')
        or die('Git is required to set up.')
      ) and (
        not isdir(get_vvm_dir())
        or die('Files and directories for VVM are already set up.')
      ) and (
        sh('git clone %s %s' % (
          vvm_repos_uri,
          repos_dir
        )) == 0
        and ln_s('%s/bin' % repos_dir, '%s/bin' % get_vvm_dir())
        and ln_s('%s/etc' % repos_dir, '%s/etc' % get_vvm_dir())
      )
    )

  def cmd_uninstall(self, args):
    '''Uninstall a specific version of Vim.'''
    p = VvmOptionParser()
    p.usage = '%prog uninstall $version'
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) == 0:
      die('Please specify a version of Vim to uninstall.')
    version = left_args[0]
    current_path = get_vims_dir('current')
    src_dir = get_src_dir(version)
    vims_dir = get_vims_dir(version)
    if isdir(current_path):
      target_path = readlink(current_path)
      if normalize_path(target_path) == normalize_path(vims_dir):
        die('%s can not be uninstalled; it is currently used.' % version)
    if isdir(src_dir):
      rm_r(src_dir)
    else:
      print 'Something wrong; %s source does not exist.' % version
    if isdir(vims_dir):
      rm_r(vims_dir)
    else:
      print 'Something wrong; %s binary does not exist.' % version
    return True

  def cmd_use(self, args):
    '''Use a specific version of Vim as the default one.'''
    p = VvmOptionParser()
    p.usage = '%prog use $version'
    (options, left_args) = p.parse_args(args[1:])
    if len(left_args) == 0:
      die('Please specify a version of Vim to use.')
    version = left_args[0]
    if version == 'system':
      current_path = get_vims_dir('current')
      if isdir(current_path):
        rm(current_path)
    else:
      vims_dir = get_vims_dir(version)
      if not isdir(vims_dir):
        die('%s is not installed.' % version)
      current_path = get_vims_dir('current')
      if isdir(current_path):
        rm(current_path)
      ln_s(vims_dir, current_path)
    return True

  # Utilities::

  def checkout(self, version):
    (fork, tagname) = parse_version(version)
    try:
      checkout_func = getattr(self, 'checkout_%s' % fork)
    except AttributeError:
      die('Fork "%s" is not known.' % fork)
    return checkout_func(version, fork, tagname)

  def checkout_macvim(self, version, fork, tagname):
    # FIXME: Refine - Most steps are similar to checkout_vimorg.
    repos_dir = get_repos_dir(fork)
    src_dir = get_src_dir(version)
    return (
      (has('git') or die('Git is required to checkout %s.' % fork))
      and (isdir(get_src_dir_itself()) or mkdir(get_src_dir_itself()))
      and (
        isdir(src_dir)
        or sh('cd %s && git archive --prefix=%s/ %s | (cd %s && tar xf -)'
              % (repos_dir, version, tagname, get_src_dir_itself())) == 0
        or die()
      )
    )

  def checkout_vimorg(self, version, fork, tagname):
    repos_dir = get_repos_dir(fork)
    src_dir = get_src_dir(version)
    return (
      (has('hg') or die('Mercurial is required to checkout %s.' % fork))
      and (isdir(get_src_dir_itself()) or mkdir(get_src_dir_itself()))
      and (
        isdir(src_dir)
        or sh('cd %s && hg archive -t tar -r %s -p %s - | (cd %s && tar xf -)'
              % (repos_dir, tagname, version, get_src_dir_itself())) == 0
        or die()
      )
    )

  def configure(self, version, custom_configure_options):
    default_configure_options = (
      '"--prefix=%s"' % os.path.expanduser(get_vims_dir(version)),
    )
    return sh('cd %s && ./configure %s' % (
      get_src_dir(version),
      ' '.join(
        default_configure_options
        + tuple("'%s'" % o for o in custom_configure_options)
      )
    )) == 0

  def fetch(self, version):
    (fork, tagname) = parse_version(version)
    try:
      fetch_func = getattr(self, 'fetch_%s' % fork)
    except AttributeError:
      die('Fork "%s" is not known.' % fork)
    return fetch_func(version, fork, tagname)

  def fetch_macvim(self, version, fork, tagname):
    # FIXME: Refine - Most steps are similar to fetch_vimorg.
    repos_uri = 'git://github.com/b4winckler/macvim.git'
    repos_dir = get_repos_dir(fork)
    src_dir = get_src_dir(version)
    return (
      (has('git') or die('Git is required to install %s.' % fork))
      and (isdir(get_repos_dir_itself()) or mkdir(get_repos_dir_itself()))
      and (
        isdir(repos_dir)
        or sh('git clone --bare %s %s' % (repos_uri, repos_dir)) == 0
        or die()
      )
      and (sh('cd %s && git fetch' % repos_dir) == 0 or die())
    )

  def fetch_vimorg(self, version, fork, tagname):
    repos_uri = 'https://vim.googlecode.com/hg/'
    repos_dir = get_repos_dir(fork)
    src_dir = get_src_dir(version)
    return (
      (has('hg') or die('Mercurial is required to install %s.' % fork))
      and (isdir(get_repos_dir_itself()) or mkdir(get_repos_dir_itself()))
      and (
        isdir(repos_dir)
        or sh('hg clone %s %s' % (repos_uri, repos_dir)) == 0
        or die()
      )
      and (sh('cd %s && hg pull' % repos_dir) == 0 or die())
    )

  def make_clean(self, version):
    return make(version, ('clean',))

  def make_install(self, version):
    return make(version, ('install',))




def get_repos_dir(fork):
  return '%s/%s' % (get_repos_dir_itself(), fork)

def get_repos_dir_itself():
  return '~/.vvm/repos'

def get_src_dir(version):
  return '%s/%s' % (get_src_dir_itself(), version)

def get_src_dir_itself():
  return '~/.vvm/src'

def get_vims_dir(version):
  return '%s/%s' % (get_vims_dir_itself(), version)

def get_vims_dir_itself():
  return '~/.vvm/vims'

def get_vvm_dir():
  return '~/.vvm'




class VvmOptionParser(optparse.OptionParser):
  def __init__(self, *args, **kw):
    optparse.OptionParser.__init__(self, *args, **kw)
    self.disable_interspersed_args()
    return

  def parse_args(self, args):
    # optparse.OptionParser.parse_args doesn't accespt tuple.
    return optparse.OptionParser.parse_args(self, list(args))

def die(message=''):
  return exit(message)

def has(progname):
  return sh('which %s >/dev/null 2>/dev/null' % progname) == 0

def isdir(path):
  return os.path.isdir(os.path.expanduser(path))

def ln_s(target, link_name):
  os.symlink(os.path.expanduser(target), os.path.expanduser(link_name))
  return True

def make(version, args):
  return sh('cd %s && make %s' % (
    get_src_dir(version),
    ' '.join(args)
  )) == 0

def mkdir(path):
  os.makedirs(os.path.expanduser(path), 0755)
  return True

def normalize_path(path):
  return os.path.abspath(os.path.expanduser(path))

def parse_version(version):
  return version.split('--')

def readlink(path):
  return os.readlink(os.path.expanduser(path))

def rm(path):
  os.remove(os.path.expanduser(path))
  return True

def rm_r(path):
  shutil.rmtree(os.path.expanduser(path))
  return True

def sh(cmdline):
  return os.system(cmdline)




if __name__ == '__main__':
  VimVersionManager().main(sys.argv)

# __END__
